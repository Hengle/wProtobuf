// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestProto/BaseType.proto

using wProtobuf;
using System.Collections;
using System.Collections.Generic;

namespace NetProto
{
    public class Double : IMessage
    {
        public double value = 0D;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != 0D)
            {
                _total_size_ += (1 + 8);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != 0D)
            {
                output.WriteRawTag(9);
                output.WriteDouble(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 9:
                    {
                        value = input.ReadDouble();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Doubles : IMessage
    {
        public List<double> value = new List<double>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Count != 0)
            {
                _total_size_ += 1 + 8 * value.Count;
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Count != 0)
            {
                output.WriteRawTag(10);
                output.WriteInt32(8 * value.Count);
                for (int i = 0; i < value.Count; ++i)
                {
                    output.WriteDouble(value[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (value == null)
                            value = new List<double>();
                        input.ReadMessage(() => { value.Add(input.ReadDouble()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Float : IMessage
    {
        public float value = 0F;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != 0F)
            {
                _total_size_ += (1 + 4);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != 0F)
            {
                output.WriteRawTag(13);
                output.WriteFloat(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 13:
                    {
                        value = input.ReadFloat();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Floats : IMessage
    {
        public List<float> value = new List<float>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Count != 0)
            {
                _total_size_ += 1 + 4 * value.Count;
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Count != 0)
            {
                output.WriteRawTag(10);
                output.WriteInt32(4 * value.Count);
                for (int i = 0; i < value.Count; ++i)
                {
                    output.WriteFloat(value[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (value == null)
                            value = new List<float>();
                        input.ReadMessage(() => { value.Add(input.ReadFloat()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class UInt64 : IMessage
    {
        public ulong value = 0UL;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != 0UL)
            {
                _total_size_ += 1 + ComputeSize.ComputeUInt64Size(value);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != 0UL)
            {
                output.WriteRawTag(8);
                output.WriteUInt64(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        value = input.ReadUInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class UInt64s : IMessage
    {
        public List<ulong> value = new List<ulong>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < value.Count; ++i)
                    local_pack_size += ComputeSize.ComputeUInt64Size(value[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Count != 0)
            {
                output.WriteRawTag(10);
                int _total_pack_size_ = 0;
                for (int i = 0; i < value.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeUInt64Size(value[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < value.Count; ++i)
                {
                    output.WriteUInt64(value[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (value == null)
                            value = new List<ulong>();
                        input.ReadMessage(() => { value.Add(input.ReadUInt64()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Int32 : IMessage
    {
        public int value = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt32Size(value);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != 0)
            {
                output.WriteRawTag(8);
                output.WriteInt32(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        value = input.ReadInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Int32s : IMessage
    {
        public List<int> value = new List<int>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < value.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt32Size(value[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Count != 0)
            {
                output.WriteRawTag(10);
                int _total_pack_size_ = 0;
                for (int i = 0; i < value.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt32Size(value[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < value.Count; ++i)
                {
                    output.WriteInt32(value[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (value == null)
                            value = new List<int>();
                        input.ReadMessage(() => { value.Add(input.ReadInt32()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class UInt32 : IMessage
    {
        public uint value = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeUInt32Size(value);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != 0)
            {
                output.WriteRawTag(8);
                output.WriteUInt32(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        value = input.ReadUInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class UInt32s : IMessage
    {
        public List<uint> value = new List<uint>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < value.Count; ++i)
                    local_pack_size += ComputeSize.ComputeUInt32Size(value[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Count != 0)
            {
                output.WriteRawTag(10);
                int _total_pack_size_ = 0;
                for (int i = 0; i < value.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeUInt32Size(value[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < value.Count; ++i)
                {
                    output.WriteUInt32(value[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (value == null)
                            value = new List<uint>();
                        input.ReadMessage(() => { value.Add(input.ReadUInt32()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Int64 : IMessage
    {
        public long value = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeInt64Size(value);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != 0L)
            {
                output.WriteRawTag(8);
                output.WriteInt64(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        value = input.ReadInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Int64s : IMessage
    {
        public List<long> value = new List<long>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < value.Count; ++i)
                    local_pack_size += ComputeSize.ComputeInt64Size(value[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Count != 0)
            {
                output.WriteRawTag(10);
                int _total_pack_size_ = 0;
                for (int i = 0; i < value.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeInt64Size(value[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < value.Count; ++i)
                {
                    output.WriteInt64(value[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (value == null)
                            value = new List<long>();
                        input.ReadMessage(() => { value.Add(input.ReadInt64()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Fixed32 : IMessage
    {
        public uint value = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != 0)
            {
                _total_size_ += (1 + 4);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != 0)
            {
                output.WriteRawTag(13);
                output.WriteFixed32(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 13:
                    {
                        value = input.ReadFixed32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Fixed32s : IMessage
    {
        public List<uint> value = new List<uint>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Count != 0)
            {
                _total_size_ += 1 + 4 * value.Count;
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Count != 0)
            {
                output.WriteRawTag(10);
                output.WriteInt32(4 * value.Count);
                for (int i = 0; i < value.Count; ++i)
                {
                    output.WriteFixed32(value[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (value == null)
                            value = new List<uint>();
                        input.ReadMessage(() => { value.Add(input.ReadFixed32()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class sFixed32 : IMessage
    {
        public int value = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != 0)
            {
                _total_size_ += (1 + 4);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != 0)
            {
                output.WriteRawTag(13);
                output.WriteSFixed32(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 13:
                    {
                        value = input.ReadSFixed32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class sFixed32s : IMessage
    {
        public List<int> value = new List<int>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Count != 0)
            {
                _total_size_ += 1 + 4 * value.Count;
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Count != 0)
            {
                output.WriteRawTag(10);
                output.WriteInt32(4 * value.Count);
                for (int i = 0; i < value.Count; ++i)
                {
                    output.WriteSFixed32(value[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (value == null)
                            value = new List<int>();
                        input.ReadMessage(() => { value.Add(input.ReadSFixed32()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Fixed64 : IMessage
    {
        public ulong value = 0UL;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != 0UL)
            {
                _total_size_ += (1 + 8);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != 0UL)
            {
                output.WriteRawTag(9);
                output.WriteFixed64(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 9:
                    {
                        value = input.ReadFixed64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Fixed64s : IMessage
    {
        public List<ulong> value = new List<ulong>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Count != 0)
            {
                _total_size_ += 1 + 8 * value.Count;
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Count != 0)
            {
                output.WriteRawTag(10);
                output.WriteInt32(8 * value.Count);
                for (int i = 0; i < value.Count; ++i)
                {
                    output.WriteFixed64(value[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (value == null)
                            value = new List<ulong>();
                        input.ReadMessage(() => { value.Add(input.ReadFixed64()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class sFixed64 : IMessage
    {
        public long value = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != 0L)
            {
                _total_size_ += (1 + 8);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != 0L)
            {
                output.WriteRawTag(9);
                output.WriteSFixed64(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 9:
                    {
                        value = input.ReadSFixed64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class sFixed64s : IMessage
    {
        public List<long> value = new List<long>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Count != 0)
            {
                _total_size_ += 1 + 8 * value.Count;
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Count != 0)
            {
                output.WriteRawTag(10);
                output.WriteInt32(8 * value.Count);
                for (int i = 0; i < value.Count; ++i)
                {
                    output.WriteSFixed64(value[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (value == null)
                            value = new List<long>();
                        input.ReadMessage(() => { value.Add(input.ReadSFixed64()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Bool : IMessage
    {
        public bool value = false;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != false)
            {
                _total_size_ += (1 + 1);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != false)
            {
                output.WriteRawTag(8);
                output.WriteBool(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        value = input.ReadBool();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Str : IMessage
    {
        public string value = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (!string.IsNullOrEmpty(value))
            {
                _total_size_ += 1 + ComputeSize.ComputeStringSize(value);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (!string.IsNullOrEmpty(value))
            {
                output.WriteRawTag(10);
                output.WriteString(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        value = input.ReadString();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class sInt32 : IMessage
    {
        public int value = 0;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeSInt32Size(value);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != 0)
            {
                output.WriteRawTag(8);
                output.WriteSInt32(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        value = input.ReadSInt32();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class sInt32s : IMessage
    {
        public List<int> value = new List<int>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < value.Count; ++i)
                    local_pack_size += ComputeSize.ComputeSInt32Size(value[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Count != 0)
            {
                output.WriteRawTag(10);
                int _total_pack_size_ = 0;
                for (int i = 0; i < value.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeSInt32Size(value[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < value.Count; ++i)
                {
                    output.WriteSInt32(value[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (value == null)
                            value = new List<int>();
                        input.ReadMessage(() => { value.Add(input.ReadSInt32()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class sInt64 : IMessage
    {
        public long value = 0L;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != 0L)
            {
                _total_size_ += 1 + ComputeSize.ComputeSInt64Size(value);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != 0L)
            {
                output.WriteRawTag(8);
                output.WriteSInt64(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 8:
                    {
                        value = input.ReadSInt64();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class sInt64s : IMessage
    {
        public List<long> value = new List<long>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Count != 0)
            {
                _total_size_ += 1;
                int local_pack_size = 0;
                for (int i = 0; i < value.Count; ++i)
                    local_pack_size += ComputeSize.ComputeSInt64Size(value[i]);
                _total_size_ += local_pack_size + ComputeSize.ComputeInt32Size(local_pack_size);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Count != 0)
            {
                output.WriteRawTag(10);
                int _total_pack_size_ = 0;
                for (int i = 0; i < value.Count; ++i)
                    _total_pack_size_ += ComputeSize.ComputeSInt64Size(value[i]);
                output.WriteInt32(_total_pack_size_);
                for (int i = 0; i < value.Count; ++i)
                {
                    output.WriteSInt64(value[i]);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (value == null)
                            value = new List<long>();
                        input.ReadMessage(() => { value.Add(input.ReadSInt64()); });
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Bytes : IMessage
    {
        public ByteString value = null;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (value != null && value.Length != 0)
            {
                _total_size_ += 1 + ComputeSize.ComputeBytesSize(value);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (value != null && value.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteBytes(value);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        value = input.ReadBytes();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Point3 : IMessage
    {
        public float x = 0F;
        public float y = 0F;
        public float z = 0F;
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (x != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (y != 0F)
            {
                _total_size_ += (1 + 4);
            }
            if (z != 0F)
            {
                _total_size_ += (1 + 4);
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (x != 0F)
            {
                output.WriteRawTag(13);
                output.WriteFloat(x);
            }
            if (y != 0F)
            {
                output.WriteRawTag(21);
                output.WriteFloat(y);
            }
            if (z != 0F)
            {
                output.WriteRawTag(29);
                output.WriteFloat(z);
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 13:
                    {
                        x = input.ReadFloat();
                    }
                    break;
                case 21:
                    {
                        y = input.ReadFloat();
                    }
                    break;
                case 29:
                    {
                        z = input.ReadFloat();
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Empty : IMessage
    {
        public int CalculateSize()
        {
            int _total_size_ = 0;
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }

    public class Map : IMessage
    {
        public class Point3mapEntry : IMessage
        {
            public int key = 0;
            public Point3 value = new Point3();
            public int CalculateSize()
            {
                int _total_size_ = 0;
                if (key != 0)
                {
                    _total_size_ += (1 + 4);
                }
                if (value != null)
                {
                    _total_size_ += 1 + ComputeSize.ComputeMessageSize(value);
                }
                return _total_size_;
            }
            public void WriteTo(IWriteStream output)
            {
                if (key != 0)
                {
                    output.WriteRawTag(13);
                    output.WriteSFixed32(key);
                }
                if (value != null)
                {
                    output.WriteRawTag(18);
                    output.WriteMessage(value);
                }
            }
            public void MergeFrom(IReadStream input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch(tag)
                    {
                    case 13:
                        {
                            key = input.ReadSFixed32();
                        }
                        break;
                    case 18:
                        {
                            if (value == null)
                                value = new Point3();
                            input.ReadMessage(value);
                        }
                        break;
                    default:
                        input.SkipLastField(tag);
                        break;
                    }
                }
            }
        }
        public Dictionary<int , Point3> point3map = new Dictionary<int , Point3>();
        public int CalculateSize()
        {
            int _total_size_ = 0;
            if (point3map != null && point3map.Count != 0)
            {
                var entry = new Point3mapEntry();
                foreach (var itor in point3map)
                {
                    _total_size_ += 1;
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    _total_size_ += ComputeSize.ComputeMessageSize(entry);
                }
            }
            return _total_size_;
        }
        public void WriteTo(IWriteStream output)
        {
            if (point3map != null && point3map.Count != 0)
            {
                var entry = new Point3mapEntry();
                foreach (var itor in point3map)
                {
                    entry.key = itor.Key;
                    entry.value = itor.Value;
                    output.WriteRawTag(10);
                    output.WriteMessage(entry);
                }
            }
        }
        public void MergeFrom(IReadStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch(tag)
                {
                case 10:
                    {
                        if (point3map == null)
                            point3map = new Dictionary<int, Point3>();
                        var entry = new Point3mapEntry();
                        input.ReadMessage(entry);
                        point3map[entry.key] = entry.value;
                    }
                    break;
                default:
                    input.SkipLastField(tag);
                    break;
                }
            }
        }
    }
}
